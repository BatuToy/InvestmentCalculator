{"ast":null,"code":"// This function expects a JS object as an argument\n// The object should contain the following properties\n// - initialInvestment: The initial investment amount\n// - annualInvestment: The amount invested every year\n// - expectedReturn: The expected (annual) rate of return\n// - duration: The investment duration (time frame)\nexport function calculateInvestmentResults(_ref) {\n  let {\n    initialInvestment,\n    annualInvestment,\n    expectedReturn,\n    duration\n  } = _ref;\n  const annualData = [];\n  let investmentValue = initialInvestment;\n  if (duration === 0) {\n    return console.error(\"Duration can't be 0. Please enter a Duration time !\");\n  }\n  for (let i = 0; i < duration; i++) {\n    const interestEarnedInYear = investmentValue * (expectedReturn / 100);\n    investmentValue += interestEarnedInYear + annualInvestment;\n    annualData.push({\n      year: i + 1,\n      // year identifier\n      interest: interestEarnedInYear,\n      // the amount of interest earned in this year\n      valueEndOfYear: investmentValue,\n      // investment value at end of year\n      annualInvestment: annualInvestment // investment added in this year\n    });\n  }\n  return annualData;\n}\n\n// The browser-provided Intl API is used to prepare a formatter object\n// This object offers a \"format()\" method that can be used to format numbers as currency\n// Example Usage: formatter.format(1000) => yields \"$1,000\"\nexport const formatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0\n});","map":{"version":3,"names":["calculateInvestmentResults","_ref","initialInvestment","annualInvestment","expectedReturn","duration","annualData","investmentValue","console","error","i","interestEarnedInYear","push","year","interest","valueEndOfYear","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits"],"sources":["/Users/batu/Desktop/PROJECTS/ReactBootcamp/ReactWebProjects/InvestmentCalculator /src/util/investment.js"],"sourcesContent":["// This function expects a JS object as an argument\n// The object should contain the following properties\n// - initialInvestment: The initial investment amount\n// - annualInvestment: The amount invested every year\n// - expectedReturn: The expected (annual) rate of return\n// - duration: The investment duration (time frame)\nexport function calculateInvestmentResults({\n  initialInvestment,\n  annualInvestment,\n  expectedReturn,\n  duration\n}) {\n  const annualData = [];\n  let investmentValue = initialInvestment;\n\n  if(duration === 0){\n    return console.error(\"Duration can't be 0. Please enter a Duration time !\");\n  }\n\n  for (let i = 0; i < duration; i++) {\n    const interestEarnedInYear = investmentValue * (expectedReturn / 100);\n    investmentValue += interestEarnedInYear + annualInvestment;\n    annualData.push({\n      year: i + 1, // year identifier\n      interest: interestEarnedInYear, // the amount of interest earned in this year\n      valueEndOfYear: investmentValue, // investment value at end of year\n      annualInvestment: annualInvestment // investment added in this year\n    });\n  }\n\n  return annualData;\n}\n\n// The browser-provided Intl API is used to prepare a formatter object\n// This object offers a \"format()\" method that can be used to format numbers as currency\n// Example Usage: formatter.format(1000) => yields \"$1,000\"\nexport const formatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,0BAA0BA,CAAAC,IAAA,EAKvC;EAAA,IALwC;IACzCC,iBAAiB;IACjBC,gBAAgB;IAChBC,cAAc;IACdC;EACF,CAAC,GAAAJ,IAAA;EACC,MAAMK,UAAU,GAAG,EAAE;EACrB,IAAIC,eAAe,GAAGL,iBAAiB;EAEvC,IAAGG,QAAQ,KAAK,CAAC,EAAC;IAChB,OAAOG,OAAO,CAACC,KAAK,CAAC,qDAAqD,CAAC;EAC7E;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,EAAEK,CAAC,EAAE,EAAE;IACjC,MAAMC,oBAAoB,GAAGJ,eAAe,IAAIH,cAAc,GAAG,GAAG,CAAC;IACrEG,eAAe,IAAII,oBAAoB,GAAGR,gBAAgB;IAC1DG,UAAU,CAACM,IAAI,CAAC;MACdC,IAAI,EAAEH,CAAC,GAAG,CAAC;MAAE;MACbI,QAAQ,EAAEH,oBAAoB;MAAE;MAChCI,cAAc,EAAER,eAAe;MAAE;MACjCJ,gBAAgB,EAAEA,gBAAgB,CAAC;IACrC,CAAC,CAAC;EACJ;EAEA,OAAOG,UAAU;AACnB;;AAEA;AACA;AACA;AACA,OAAO,MAAMU,SAAS,GAAG,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;EACtDC,KAAK,EAAE,UAAU;EACjBC,QAAQ,EAAE,KAAK;EACfC,qBAAqB,EAAE,CAAC;EACxBC,qBAAqB,EAAE;AACzB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}